services:
  # --- Frontend: React Web Service (serves static files) ---
  - type: web
    name: konvato-client
    env: node
    rootDir: client
    buildCommand: npm install && npm run build
    startCommand: npm start
    healthCheckPath: /health

  # --- Backend: Node.js Web Service ---
  - type: web
    name: konvato-server
    env: node
    rootDir: server
    buildCommand: npm install
    startCommand: node server.js
    healthCheckPath: /health
    envVars:
      - key: MONGODB_URI
        fromDatabase:
          name: konvato-mongodb
          property: connectionString
      - key: REDIS_URL
        fromDatabase:
          name: konvato-redis
          property: connectionString
      - key: AUTOMATION_SERVICE_URL
        sync: false
      - key: JWT_SECRET
        generateValue: true # Let Render generate a strong secret
      - key: GROQ_API_KEY
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: ANTHROPIC_API_KEY
        sync: false
      - key: LLM_PROVIDER
        value: groq
      - key: CORS_ORIGIN
        sync: false

  # --- Automation: Python Private Service (Docker) ---
  - type: pserv # Private Service
    name: konvato-automation
    env: docker
    dockerfilePath: ./Dockerfile.automation
    dockerContext: .
    disk:
      name: playwright-cache
      mountPath: /ms-playwright
      sizeGB: 5
    envVars:
      - key: PLAYWRIGHT_BROWSERS_PATH
        value: /ms-playwright
      - key: JWT_SECRET
        fromService:
          type: web
          name: konvato-server
          envVarKey: JWT_SECRET
      - key: GROQ_API_KEY
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: ANTHROPIC_API_KEY
        sync: false
      - key: LLM_PROVIDER
        value: groq

databases:
  # --- MongoDB Database ---
  - name: konvato-mongodb
    databaseName: konvato_db
    ipAllowList: []

  # --- Redis Cache ---
  - name: konvato-redis
    ipAllowList: []